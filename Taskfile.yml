version: '3'

env:
  DOCKER_IMAGE_NAME: '{{ .DOCKER_IMAGE_NAME | default "go-gator" }}'
  DOCKER_USERNAME:   '{{ .DOCKER_USERNAME | default "qniw984" }}'
  DOCKER_IMAGE_TAG:  '{{ .DOCKER_IMAGE_TAG | default "latest" }}'
  DOCKERHUB_USERNAME: '{{ .DOCKER_LOGIN_USERNAME }}'
  DOCKERHUB_PASSWORD: '{{ .DOCKERHUB_PASSWORD }}'
  TESTDIR_NAME:      '{{ .TESTDIR_NAME | default "pkg_tests" }}'

tasks:
  fmt:
    desc: Format all code in all subdirectories
    cmds:
      - go fmt ./...

  vet:
    desc: Format all code in all subdirectories
    cmds:
      - go vet ./...

  clean:
    desc: Clean go mod dependencies
    cmds:
      - go mod tidy

  stch:
    desc: Run staticcheck
    cmds:
      - staticcheck ./...

  pre-launch:
    label: Prepare code before launching
    desc: Formats code, optimizes dependencies and runs staticcheck tool
    deps:
      - fmt
      - vet
      - clean
      - stch

  build:
    label: Build go-gator
    desc: Builds executable file for the server
    cmds:
      - go build

  run:
    label: Running go-gator
    desc: Run the application
    cmds:
      - go run .

  test:
    label: Run all tests in application
    desc: This task runs all available test files from all child folders
    # Compiling and running tests separately to handle relative paths correctly
    cmd: |
      go test ./... -v

  docker-build:
    desc: Build the docker image using Dockerfile with go-gator as a name
    cmd: docker build -t {{ .DOCKER_IMAGE_NAME }} .

  docker-run:
    desc: Run docker image
    cmd: docker run {{ .DOCKER_IMAGE_NAME }}

  publish:
    label: Pushing image to dockerhub
    desc: Push docker image to dockerhub
    deps:
      - docker-build
    cmds:
      - docker login -u {{ .DOCKERHUB_USERNAME }} -p {{ .DOCKERHUB_PASSWORD }}
      - docker push {{ .DOCKER_USERNAME }}/{{ .DOCKER_IMAGE_NAME }}:{{ .DOCKER_IMAGE_TAG }}

  deploy:
    desc: Deploy news aggregator app on the Kubernetes cluster
    cmds:
      - kubectl apply -f templates/

  undeploy:
    desc: Remove news aggregator from kubernetes Cluster
    cmds:
      - kubectl delete -f templates/

  createChart:
    desc: Created a new Helm chart with all needed resources for news aggregator
    cmds:
      - helm create go-gator

  installChart:
    desc: Install the Helm chart on the Kubernetes cluster
    cmds:
      - helm install go-gator go-gator

  uninstallChart:
    desc: Uninstall the Helm chart from the Kubernetes cluster
    cmds:
      - helm uninstall go-gator

  installCertManager:
    desc: Install cert-manager on the Kubernetes cluster using helm
    cmds:
      - helm repo add jetstack https://charts.jetstack.io --force-update
      - helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.15.2 --set crds.enabled=true

  start:
    cmds:
      - minikube start
      - kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.yaml
      - echo "Waiting for cert manager to working..."
      - sleep 10
      - cd operator
      - make generate
      - make manifests
      - make install
      - make deploy
      - kubectl apply -f ../templates/

  installTask:
    cmds:
      - go install github.com/go-task/task/v3/cmd/task@latest
  installVpa:
    desc: Install Vertical Pod Autoscaler
    cmds:
      - git clone https://github.com/kubernetes/autoscaler.git
      - cd autoscaler/vertical-pod-autoscaler
      - git checkout origin/vpa-release-1.0
      - REGISTRY=registry.k8s.io/autoscaling TAG=1.0.0 ./hack/vpa-process-yamls.sh apply

  installMetricsServerHelm:
    desc: Install metrics server using helm
    cmds:
      - helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/

  installMetricsServer:
    desc: Install metrics server
    cmds:
      - kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.7.1/components.yaml

  enableMetricsAddon:
    desc: Enable metrics addon in minikube
    cmds:
      - minikube addons enable metrics-server

  aws-login:
    desc: Login to AWS CLI
    cmds:
      - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 406477933661.dkr.ecr.us-east-2.amazonaws.com

  img-ecr-build:
    desc: Build image for ECR
    cmds:
      - docker build -t qniw984/go-gator .
      - docker tag qniw984/go-gator 406477933661.dkr.ecr.us-east-2.amazonaws.com/qniw984/go-gator

  img-ecr-push:
    desc: Push image to ECR
    deps:
      - img-ecr-build
    cmds:
      - docker push 406477933661.dkr.ecr.us-east-2.amazonaws.com/qniw984/go-gator

  chart-ecr-build:
    desc: Build Helm chart for ECR
    cmds:
      - helm package go-gator

  chart-ecr-push:
    desc: Push image to ECR
    deps:
      - ecr-build
    cmds:
      - helm push go-gator-0.1.0.tgz oci://406477933661.dkr.ecr.us-east-2.amazonaws.com/qniw984/
