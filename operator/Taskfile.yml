version: '3'

vars:
  IMG: "qniw984/hotnews-controller:1.3.8"
  ENVTEST_K8S_VERSION: "1.30.0"
  PLATFORMS: "linux/arm64,linux/amd64,linux/s390x,linux/ppc64le"
  LOCALBIN: "./bin"
  KUBECTL: "kubectl"
  KUSTOMIZE_VERSION: "v5.4.2"
  CONTROLLER_TOOLS_VERSION: "v0.15.0"
  ENVTEST_VERSION: "release-0.18"
  GOLANGCI_LINT_VERSION: "v1.59.1"

tasks:
  help:
    desc: "Display help"
    cmds:
      - "awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  task \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' Taskfile.yml"

  ##@ Development
  manifests:
    desc: "Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects."
    cmds:
      - "{{ .LOCALBIN }}/controller-gen rbac:roleName=manager-role crd webhook paths='./...' output:crd:artifacts:config=config/crd/bases"
    deps: [controller-gen]

  generate:
    desc: "Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations."
    cmds:
      - "{{ .LOCALBIN }}/controller-gen object:headerFile='hack/boilerplate.go.txt' paths='./...'"
    deps: [controller-gen]

  fmt:
    desc: "Run go fmt against code."
    cmds:
      - "go fmt ./..."

  vet:
    desc: "Run go vet against code."
    cmds:
      - "go vet ./..."

  test:
    desc: "Run tests."
    cmds:
      - "KUBEBUILDER_ASSETS='$(shell {{ .LOCALBIN }}/setup-envtest use {{ .ENVTEST_K8S_VERSION }} --bin-dir {{ .LOCALBIN }} -p path)' go test $(go list ./... | grep -v /e2e) -coverprofile cover.out"

  test-e2e:
    desc: "Run the e2e tests against a Kind k8s instance that is spun up."
    cmds:
      - "go test ./test/e2e/ -v -ginkgo.v"

  lint:
    desc: "Run golangci-lint linter"
    cmds:
      - "{{LOCALBIN}}/golangci-lint run"
    deps: [golangci-lint]

  lint-fix:
    desc: "Run golangci-lint linter and perform fixes"
    cmds:
      - "{{LOCALBIN}}/golangci-lint run --fix"
    deps: [golangci-lint]

  ##@ Build
  build:
    desc: "Build manager binary."
    cmds:
      - "go build -o bin/manager cmd/main.go"
    deps: [manifests, generate, fmt, vet]

  run:
    desc: "Run a controller from your host."
    cmds:
      - "go run ./cmd/main.go"
    deps: [manifests, generate, fmt, vet]

  docker-build:
    desc: "Build docker image with the manager."
    cmds:
      - "{{ .CONTAINER_TOOL }} build -t {{ .IMG }} ."

  docker-push:
    desc: "Push docker image with the manager."
    cmds:
      - "{{ .CONTAINER_TOOL }} push {{ .IMG }}"

  docker-buildx:
    desc: "Build and push docker image for the manager for cross-platform support"
    cmds:
      - "sed -e '1 s/\\(^FROM\\)/FROM --platform=\\$${ .BUILDPLATFORM }/; t' -e ' 1,// s//FROM --platform=\\$${BUILDPLATFORM}/' Dockerfile > Dockerfile.cross"
      - "{{ .CONTAINER_TOOL }} buildx create --name operator-builder"
      - "{{ .CONTAINER_TOOL }} buildx use operator-builder"
      - "{{ .CONTAINER_TOOL }} buildx build --push --platform={{ .PLATFORMS }} --tag {{ .IMG }} -f Dockerfile.cross ."
      - "{{ .CONTAINER_TOOL }} buildx rm operator-builder"
      - "rm Dockerfile.cross"

  build-installer:
    desc: "Generate a consolidated YAML with CRDs and deployment."
    cmds:
      - "mkdir -p dist"
      - "cd config/manager && {{ .LOCALBIN }}/kustomize edit set image controller={{ .IMG }}"
      - "{{ .LOCALBIN }}/kustomize build config/default > dist/install.yaml"
    deps: [manifests, kustomize]

  ##@ Deployment
  install:
    desc: "Install CRDs into the K8s cluster."
    cmds:
      - "{{ .LOCALBIN }}/kustomize build config/crd | {{ .KUBECTL }} apply -f -"
    deps: [manifests, kustomize]

  uninstall:
    desc: "Uninstall CRDs from the K8s cluster."
    cmds:
      - "{{ .LOCALBIN }}/kustomize build config/crd | {{ .KUBECTL }} delete --ignore-not-found=true -f -"
    vars:
      ignore-not-found: false
    deps: [manifests, kustomize]

  deploy:
    desc: "Deploy controller to the K8s cluster."
    cmds:
      - "cd config/manager && {{ .LOCALBIN }}/kustomize edit set image controller={{ .IMG }}"
      - "{{ .LOCALBIN }}/kustomize build config/default | {{ .KUBECTL }} apply -f -"
    deps: [manifests, kustomize]

  undeploy:
    desc: "Undeploy controller from the K8s cluster."
    cmds:
      - "{{ .LOCALBIN }}/kustomize build config/default | {{ .KUBECTL }} delete --ignore-not-found=true -f -"
    vars:
      ignore-not-found: false
    deps: [kustomize]

  kustomize:
    desc: "Download kustomize locally if necessary."
    cmds:
      - "test -f {{ .LOCALBIN }}/kustomize-{{ .KUSTOMIZE_VERSION }} || GOBIN={{ .LOCALBIN }} go install sigs.k8s.io/kustomize/kustomize/v5@{{ .KUSTOMIZE_VERSION }}"
      - "ln -sf {{ .LOCALBIN }}/kustomize-{{ .KUSTOMIZE_VERSION }} {{ .LOCALBIN }}/kustomize"

  controller-gen:
    desc: "Download controller-gen locally if necessary."
    cmds:
      - "test -f {{ .LOCALBIN }}/controller-gen-{{ .CONTROLLER_TOOLS_VERSION }} || GOBIN={{ .LOCALBIN }} go install sigs.k8s.io/controller-tools/cmd/controller-gen@{{ .CONTROLLER_TOOLS_VERSION }}"
      - "ln -sf {{ .LOCALBIN }}/controller-gen-{{ .CONTROLLER_TOOLS_VERSION }} {{ .LOCALBIN }}/controller-gen"

  envtest:
    desc: "Download setup-envtest locally if necessary."
    cmds:
      - "test -f {{ .LOCALBIN }}/setup-envtest-{{ .ENVTEST_VERSION }} || GOBIN={{ .LOCALBIN }} go install sigs.k8s.io/controller-runtime/tools/setup-envtest@{{ .ENVTEST_VERSION }}"
      - "ln -sf {{ .LOCALBIN }}/setup-envtest-{{ .ENVTEST_VERSION }} {{ .LOCALBIN }}/setup-envtest"

  golangci-lint:
    desc: "Download golangci-lint locally if necessary."
    cmds:
      - "test -f {{ .LOCALBIN }}/golangci-lint-{{ .GOLANGCI_LINT_VERSION }} || GOBIN={{ .LOCALBIN }} go install github.com/golangci/golangci-lint/cmd/golangci-lint@{{ .GOLANGCI_LINT_VERSION }}"
      - "ln -sf {{ .LOCALBIN }}/golangci-lint-{{ .GOLANGCI_LINT_VERSION }} {{ .LOCALBIN }}/golangci-lint"
